- Input Loop
- Parsing
	- Lexical Analysis/Tokenization
* enum that contains token names
* struct to hold each found token that contains: enum of token name and value of token
* loop over string of text (in our case, a command), separate the tokens:values and put them in an array
	** command [command modifiers] [command inputs]
		ex. grep -i "hello" input.txt > output.txt

Tokens: 
STRING_LITERAL = grep,
COMMAND_FLAG = -i,
STRING_LITERAL = "hello",
STRING_LITERAL = input.txt,
OPERATOR = >,
STRING_LITERAL = output.txt

(We classify commands and parameters as string literals because their meaning is based on their location, not their grammar.
	For example a command will always come before a parameter and it may take parameters, so whether the token is located before/after something matters.)

Good shell operations write-up: https://unix.stackexchange.com/questions/159513/what-are-the-shells-control-and-redirection-operators

	- Parse generated token array


* Implement basic tokenization without operators

- Executing standard terminal commands like ls, cd, touch, etc...
- Output/input redirection
